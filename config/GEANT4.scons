#-*-python-*-
# GEANT4 configuration for SCons

import os
from buildhelp import RATROOT, testenv

# Import GEANT4 environment variables starting with G4 or CLHEP
for k in [varname for varname in os.environ.keys()
          if varname.startswith('G4') or varname.startswith('CLHEP')]:
    globals()[k] = os.environ[k]


# Build a temporary GEANT4 environment to hold compile/link flags
g4env = Environment()
g4env["G4SYSTEM"] = G4SYSTEM
g4env.Append(CPPPATH=[G4INCLUDE, CLHEP_INCLUDE_DIR],
             LIBPATH=[os.path.join(G4LIB, G4SYSTEM), CLHEP_LIB_DIR],
             LIBS='CLHEP')

# Use liblist tool in GEANT4 to obtain names of all the GEANT4 libs
g4env.ParseConfig('%s/liblist -m %s < %s/libname.map'.replace('%s', os.path.join(G4LIB, G4SYSTEM)))

# Figure out which extra packages are required (UI, VIS, etc.) and
# add appropriate CPPFLAGS and LIBS.
#
# Some optional packages need arch-specific flags for X11, OpenGL, etc. Put
# these names into archextra set.  They correspond to keys defined in
# the ARCH.* files.
archextra = {} # Use a hash instead of a Set for python 2.2 compatability

# Equiv of G4UI_USE.gmk
if not testenv("G4UI_NONE"):
    uicppflags = []
    g4env.Append(LIBS=['G4UIbasic', 'G4UIcommon', 'G4UIGAG'])
    if testenv("G4UI_USE_TCSH"):
        uicppflags.append('G4UI_USE_TCSH')
    if testenv("G4UI_USE_GAG"):
        uicppflags.append('G4UI_USE_GAG')
    if testenv("G4UI_USE_XM"):
        uicppflags.append('G4UI_USE_XM')
        archextra['Xm'] = True
#    if testenv("G4UI_USE_XAW"):
#        uicppflags.append('G4UI_USE_XAW') #fixme
#        archextra['Xaw'] = True
    if len(uicppflags) == 0:
        uicppflags.append('G4UI_USE_TERMINAL')
    g4env.Append(CPPDEFINES=uicppflags)

# Equiv of G4VIS_USE.gmk
if not testenv("G4VIS_NONE"):
    g4env.Append(CPPDEFINES=['G4VIS_USE_DAWNFILE', 'G4VIS_USE_HEPREPFILE',
                           'G4VIS_USE_RAYTRACER', 'G4VIS_USE_VRMLFILE',
                           'G4VIS_USE_ASCIITREE', 'G4VIS_USE_GAGTREE'],
               LIBS=['G4FR', 'G4visHepRep', 'G4RayTracer', 'G4VRML', 'G4Tree'])

    viscppflags = ['G4VIS_USE']    
    if testenv("G4VIS_USE_DAWN"):
        viscppflags.append('G4VIS_USE_DAWN')
    if testenv("G4VIS_USE_OPENGLX"):
        viscppflags.append('G4VIS_USE_OPENGLX')
        archextra['X11'] = True
        archextra['OpenGL'] = True
    if testenv("G4VIS_USE_OPENGLXM"):
        viscppflags.append('G4VIS_USE_OPENGLXM')
        archextra['Xm'] = True
        archextra['OpenGL'] = True
    if testenv("G4VIS_USE_OPENGL"):
        viscppflags.append('G4VIS_USE_OPENGL')
        g4env.Append(LIBS='G4OpenGL')
        archextra['OpenGL'] = True
    if testenv("G4VIS_USE_OIX"):
        viscppflags.append('G4VIS_USE_OIX')
        archextra['Xm'] = True
    if testenv("G4VIS_USE_OI"):
        viscppflags.append('G4VIS_USE_OI')
        g4env.Append(LIBS='G4OpenInventor')
        archextra['IV'] = True
    if testenv("G4VIS_USE_VRML"):
        viscppflags.append('G4VIS_USE_VRML')

    g4env.Append(CPPDEFINES=viscppflags,
               LIBS=['G4vis_management', 'G4modeling'])


# Hand back dictionary instead of environment because there is no
# good way to merge two Environment objects.
g4opts = { 'G4SYSTEM' : G4SYSTEM, 'ARCHEXTRA' : archextra.keys() }
for key in ['ASFLAGS','CCFLAGS','CPPFLAGS','CPPPATH','LIBPATH','LIBS',
            'LINKFLAGS', 'CPPDEFINES']:
    g4opts[key] = g4env[key]

# Returns a dictionary when you import this file using:
# g4opts = SConscript('config/GEANT4.scons')
#
# Merge into your build environment with:
# env.Append(g4opts)
Return("g4opts")
