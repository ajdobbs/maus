#-*-python-*-
# SCons file to create Environment() for building RAT applications.

import os
from buildhelp import RATROOT, ROOTARCH, testenv

env = Environment()

#### Builder: RATHeader(header file)
#
# Copies header file to $RATROOT/include/RAT.  Modules keep their header
# files in their respective src/ subdirectories. However, it is convenient
# to have them all in one place to reduce the number of -I flags needed
# for g++.
#
# For now, only use this builder on one header file at a time.  No source
# lists.

def ratheader_emitter(target, source, env):
    'Returns target filenames in $RATROOT/include dir for given source files.'
    target = [File(os.path.join(env['RATROOT'], 'include', 'RAT',
                                env['INCLUDE_SUBDIR'],
                                os.path.basename(str(s))))
              for s in source]
    return target, source

def copy_generator(source,target,env,for_signature):
    'Tell SCons how to "create" a header file (by copying it).'
    return Copy(target,source)

# Tell SCons how to "build" a header file (by copying it using ratheader_emitter above).
ratheader = Builder(generator=copy_generator,
                    emitter=ratheader_emitter)
####

#### Builder: RATApp([list of source files])
#
# Compiles and links source files into full RAT application.  Links
# against static RAT library, and includes default rat.cc main function.
# If you want to supply your own main function instead, set the 'mymain'
# attribute in your environment:
#
# env['mymain'] = True
# env.RATApp('myapp', ['mymain.cc', 'foo.cc', 'bar.cc'])

def ratapp_emitter(target, source, env):
    'Appends RAT library and appropriate main source file to source list.'
    if not env.has_key('mymain') or not env['mymain']:
        source += [ env['RATMAIN'] ]
        
    return (target, source + [env['RATLIB']])

ratapp = Builder(action=env['BUILDERS']['Program'].action,
                 emitter=ratapp_emitter)
####


#### Create Environment for compiling RAT applications

rootopts = SConscript('ROOT.scons')
g4opts = SConscript('GEANT4.scons')
arch = SConscript('ARCH.'+ROOTARCH)

G4SYSTEM = g4opts['G4SYSTEM']
G4VERSIONCODE = os.popen("grep G4VERSIONCODE %s/include/local_g4version.hh | awk '{ print $3 }'" % RATROOT).read().strip()

env.Append(ENV=os.environ,
           CPPPATH=['#/include', '#/include/RAT'],  # FIXME: remove second
           CPPDEFINES=[('KL_USE_ROOT', 1),
                       ],
           LIBPATH=['#/lib']
           )

# Add architecture-dependent flags, GEANT4, and ROOT
env.Append(**arch['default'])
env.Append(**rootopts)
env.Append(**g4opts)

# Add optional build flags
# These use command line arguments:
#  scons profile=1
#  scons debug=1
#  scons opt=1
#
# Also checks environment variables:
#  G4DEBUG=1
#  G4OPTIMISE=1 or G4OPTIMIZE=1

profile = int(ARGUMENTS.get('profile', 0)) == 1
if profile:
    env.Append(CXXFLAGS=arch['PROFILEFLAGS'])
    debugdefault = 1
elif testenv('G4DEBUG'):
    debugdefault = 1
else:
    debugdefault = 0

debug = int(ARGUMENTS.get('debug', debugdefault)) == 1
if debug:
    env.Append(CXXFLAGS=arch['DEBUGFLAGS'])
    env.Append(LINKFLAGS=arch['DEBUGFLAGS'])
    
if debug and not (testenv('G4OPTIMISE') or testenv('G4OPTIMIZE')):
    optdefault = 0
else:
    optdefault = 1
    
opt = int(ARGUMENTS.get('opt', optdefault)) == 1
if opt:
    env.Append(CXXFLAGS=arch['OPTFLAGS'])


# Add arch-dependent flags needed by extra packages (X11, OpenGL, etc.)
for pkg in env['ARCHEXTRA']:
    env.Append(**arch[pkg])

#### Set other useful RAT-specific variables

# Put all intermediate build targets into build/[ROOTARCH] directory
# This allows multiple platforms to be compiled in same RAT tree
env['BUILDDIR'] = os.path.join('#/build', ROOTARCH)
env.BuildDir(env['BUILDDIR'], '#/', duplicate=0)

env['RATROOT'] = RATROOT
# Static library name for linking to RAT applications
env['RATLIB'] = os.path.join(RATROOT, 'lib', 'librat_'+G4SYSTEM+'.a')
# Shared library name loaded into ROOT for scripts
env['RATSOLIB'] = os.path.join(RATROOT, 'lib', 'libRATEvent_'+G4SYSTEM+'.so')
env['RATBIN'] = os.path.join(RATROOT, 'bin', 'rat_'+G4SYSTEM)
# Name of source file containing default main function
env['RATMAIN'] = env.Object(os.path.join(env['BUILDDIR'], 'rat.cc'))

env['ROOTCINT_INCFLAGS'] = ['-I$RATROOT/include/RAT',
                            '-I$RATROOT/include/RAT/DS']

env.Append(BUILDERS={'RATApp' : ratapp,
                     'RATHeader' : ratheader})

# Allows user-compiled apps to find rat.cc main function.
env.Repository('$RATROOT')

# Return enviroment object to caller who loaded us this way:
#
# env = SConscript('$RATROOT/config/RAT.scons')

Return('env')
