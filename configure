#!/bin/bash
# Configure script
# Run once when you unpack source

echo "INFO: This is the './configure' script.  You should only run this once. The purpose of me is to:"
echo "INFO: "
echo "INFO:     1. Check that you have a compiler"
echo "INFO:     2. Check that you have Python"
echo "INFO:     3. Check your version of Python is supported"
echo "INFO:     4. Create a file called 'env.sh' that stores your environmental variables"
echo "INFO:"
echo

# Check for g++                                                                                                                                              
type -P gcc &>/dev/null || { echo "FATAL: gcc/g++ is required to compile code." >&2; echo "FATAL: To install within MAUS, please run:" >&2; echo: "FATAL:      MAUS_ROOT_DIR=${maus_root_dir} ./third_party/bash/01mpfr.bash" >&2; echo: "FATAL:      MAUS_ROOT_DIR=${maus_root_dir} ./third_party/bash/02gcc.bash" >&2; echo: "FATAL:      MAUS_ROOT_DIR=${maus_root_dir} ./third_party/bash/03python.bash" >&2; exit 1; }
type -P g++ &>/dev/null || { echo "FATAL: gcc/g++ is required to compile code." >&2; echo "FATAL: To install within MAUS, please run:" >&2; echo: "FATAL:      MAUS_ROOT_DIR=${maus_root_dir} ./third_party/bash/01mpfr.bash" >&2; echo: "FATAL:      MAUS_ROOT_DIR=${maus_root_dir} ./third_party/bash/02gcc.bash" >&2; echo: "FATAL:      MAUS_ROOT_DIR=${maus_root_dir} ./third_party/bash/03python.bash" >&2; exit 1; }

# Find where MAUS is installed
maus_root_dir=`pwd`
echo "INFO: MAUS ROOT directory, which internal to the program is called \$MAUS_ROOT_DIR.  This *should* also be your current directory:"
echo "INFO:"
echo "INFO:     ${maus_root_dir}"
echo "INFO:"
echo

# Temporarily setup the environment (this gets repeated in the env.sh output)
#      PATH says where the binaries are
#      LD_LIBRARY_PATH says where your shared libraries are
if [ -z "${PATH}" ]; then  # see if the variable exists yet
    PATH=${maus_root_dir}/third_party/install/bin       # if not, initialize it
else
    PATH=${maus_root_dir}/third_party/install/bin:$PATH # else add to it
fi
if [ -z "${LD_LIBRARY_PATH}" ]; then  # see if the variable exists yet
    LD_LIBRARY_PATH=${maus_root_dir}/third_party/install/lib                  # if not, initialize it
else                                                                                                                                                               
    LD_LIBRARY_PATH=${maus_root_dir}/third_party/install/lib:$LD_LIBRARY_PATH # else add to to it
fi 

# Check for Python
type -P python &>/dev/null || { echo "FATAL: Python is required.  To install within MAUS, please run:" >&2; echo "FATAL:      MAUS_ROOT_DIR=${maus_root_dir} ./third_party/bash/03python.bash";exit 1; }

python_version=`LD_LIBRARY_PATH=./third_party/install/lib python -V 2>&1` 
## Check for supported python version
if [ "${python_version}" != "Python 2.7" ]
then
    echo "WARNING: Unsupported python version (You are using ${python_version})."
    echo "WARNING: Please us Python 2.7 within MAUS by running the following command:"
    echo "WARNING:    MAUS_ROOT_DIR=${maus_root_dir} ./third_party/bash/00python.bash"
    echo
fi

type -P scons &>/dev/null || { echo "FATAL: Scons is required.  To install within MAUS, please run:" >&2; echo "FATAL:      MAUS_ROOT_DIR=${maus_root_dir} ./third_party/bash/01scons.bash";echo "FATAL:";echo "FATAL: but it's weird that it's not working.  This ships with MAUS.  Is your MAUS ROOT directory correct?";exit 1; }

### Create environment files

cat > env.sh <<EOF
#/bin/sh
if [ -z "\$MAUS_ROOT_DIR" ]; then
     MAUS_ROOT_DIR=${maus_root_dir}

     if [ -z "\${PATH}" ]; then  # see if the variable exists yet
         PATH=\${MAUS_ROOT_DIR}/third_party/install/bin # initialize it
     else
         PATH=\${MAUS_ROOT_DIR}/third_party/install/bin:\${PATH} # else add it
     fi

     if [ -z "\${LD_LIBRARY_PATH}" ]; then  # see if the variable exists yet 
          LD_LIBRARY_PATH=\${MAUS_ROOT_DIR}/third_party/install/lib # intiailize it
     else
          LD_LIBRARY_PATH=\${MAUS_ROOT_DIR}/third_party/install/lib:\${LD_LIBRARY_PATH} # else add it
     fi

     if [ -z "\${MANPATH}" ]; then
           MANPATH="\${MAUS_ROOT_DIR}/third_party/install/share/man/man1"
     else
          MANPATH="\${MAUS_ROOT_DIR}/third_party/install/share/man/man1":$MANPATH
     fi

     # ROOT specific garbage
     LD_LIBRARY_PATH=\${MAUS_ROOT_DIR}/third_party/install/lib/root:\${LD_LIBRARY_PATH}
     if [ -z "\${PYTHONPATH}" ]; then  # see if the variable exists yet
          PYTHONPATH=\${MAUS_ROOT_DIR}/third_party/install/lib/root # intiailize it
     else
          PYTHONPATH=\${MAUS_ROOT_DIR}/third_party/install/lib/root:\${PYTHONPATH} # else add it
     fi

     # workers
     PYTHONPATH=\$MAUS_ROOT_DIR/build:\$PYTHONPATH
     LD_LIBRARY_PATH=\$MAUS_ROOT_DIR/build:\$LD_LIBRARY_PATH

     # disco
     DISCO_HOME=\$MAUS_ROOT_DIR/third_party/build/tuulos-disco-742e814
     PATH=\$DISCO_HOME/bin:\$PATH
     PYTHONPATH=\$DISCO_HOME/lib:\$PYTHONPATH
     LD_LIBRARY_PATH=\$DISCO_HOME/lib:\$LD_LIBRARY_PATH

     # clhep
     export CLHEPVERS=2.0.4.2
     export CLHEP_BASE_DIR=\${MICE_PATH}/\${COMPILER}/CLHEP/\${CLHEPVERS}/CLHEP
     export CLHEP_INCLUDE_DIR=$CLHEP_BASE_DIR/include
     export CLHEP_LIB_DIR=$CLHEP_BASE_DIR/lib
     export CLHEP_LIB=CLHEP
     export CLHEPSYS=\${CLHEP_BASE_DIR}

     export G4DEBUG=1
     export G4VERS=geant4.9.2.p01
     export G4SYSTEM=Linux-g++
     export G4INSTALL=\${MAUS_ROOT_DIR}/third_party/build/\${G4VERS}
     export G4LIB=\${G4INSTALL}/lib
     LD_LIBRARY_PATH=\${G4LIB}/\${G4SYSTEM}:\${LD_LIBRARY_PATH}
     export G4INCLUDE=\${G4INSTALL}/include/
     export G4TMP=\${G4INSTALL}
     export G4VIS_BUILD_DAWNFILE_DRIVER=1
     export G4VIS_USE_DAWNFILE=1
     export G4VIS_USE=0
     export G4OPTIMISE=2
     export OGLHOME=/usr/X11R6
     export G4LEDATA=\${G4INSTALL}/data/G4EMLOW6.2/
     export G4ABLADATA=\${G4INSTALL}/data/G4ABLA3.0/
     export G4NEUTRONDATA=\${G4INSTALL}/data/G4NDL3.13/
     export G4LEVELGAMMADATA=\${G4INSTALL}/data/PhotonEvaporation2.0/
     export G4RADIOACTIVEDATA=\${G4INSTALL}/data/RadioactiveDecay3.2/

     export MICEFILES=\${MAUS_ROOT_DIR}/commonCpp/FILES
 
     export MAUS_ROOT_DIR PATH LD_LIBRARY_PATH PYTHONPATH MANPATH DISCO_HOME
     echo "SUCCESS: MAUS setup"
else
     echo "ERROR: MAUS already setup"
fi

EOF

echo "SUCCESS: Whenever you want to use MAUS, you must run:"
echo "SUCCESS:"
echo "SUCCESS:      source env.sh"
echo "SUCCESS:"
echo "SUCCESS: which can be added to your ~/.bashrc if you wish to automate it"
